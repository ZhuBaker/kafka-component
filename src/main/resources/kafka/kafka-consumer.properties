#A list of host/port pairs to use for establishing the initial connection to 
#the Kafka cluster. The client will make use of all servers irrespective of which
# servers are specified here for bootstrapping\u2014this list only impacts the
# initial hosts used to discover the full set of servers. This list should be 
#in the form host1:port1,host2:port2,.... Since these servers are just used for 
#the initial connection to discover the full cluster membership (which may change 
#dynamically), this list need not contain the full set of servers (you may want more
# than one, though, in case a server is down)
#bootstrap.servers=10.0.1.50:19090,10.0.1.51:19091,10.0.1.52:19092
#An id string to pass to the server when making requests. The purpose of 
#this is to be able to track the source of requests beyond just ip/port by 
#allowing a logical application name to be included in server-side request logging.
#client.id=client_test
# message key deserializerr
key.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
# message value deserializerr
value.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
#consumer group id
group.id=group1
#Controls how to read messages written transactionally. If set to read_committed, 
#consumer.poll() will only return transactional messages which have been committed.
# If set to read_uncommitted' (the default), consumer.poll() will return all messages, 
#even transactional messages which have been aborted. Non-transactional messages will
# be returned unconditionally in either mode.
isolation.level=read_committed
#If true the consumer's offset will be periodically committed in the background.
enable.auto.commit=false
#The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.
auto.commit.interval.ms=1000
#The maximum number of records returned in a single call to poll(),defaut 500
max.poll.records=500
auto.offset.reset=earliest

